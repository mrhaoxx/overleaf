name: build and push sharelatex image

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mrhaoxx/sharelatex
  BASE_REGISTRY: ghcr.io
  BASE_IMAGE_NAME: mrhaoxx/sharelatex-base

jobs:
  build-and-push:
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      tag: ${{ steps.gettag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          labels: |
            org.opencontainers.image.title=overleaf
            org.opencontainers.image.description=overleaf
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get tag
        id: gettag
        run: |
          ref="${GITHUB_REF##*/}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              tag="${GITHUB_REF#refs/tags/}"
            else
              tag="latest"
            fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Prepare to build
        run: |
          cp ${{ github.workspace }}/server-ce/.dockerignore ${{ github.workspace }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          provenance: false
          build-args: |
            OVERLEAF_BASE=${{ env.BASE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:latest
            MONOREPO_REVISION=${{ github.sha }}
          push: true
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/server-ce/Dockerfile
          platforms: linux/${{ matrix.platform }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.gettag.outputs.tag }}-${{ matrix.platform }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.gettag.outputs.tag }}-${{ matrix.platform }}
          cache-to: type=inline

  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}-arm64
          
          docker manifest annotate ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}-amd64 --arch amd64
          docker manifest annotate ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}-arm64 --arch arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}